from datetime import datetime

# –ß—Ç–µ–Ω–∏–µ .txt –≤ —Å–ª–æ–≤–∞—Ä—å ("–î–∞—Ç–∞", "–¶–µ–Ω–∞")
def dataReader(fName):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è
    dataOpen = {}
    dataClose = {}
    volume = {}

    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –∑–∞–Ω–µ—Å–µ–Ω–∏–µ –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    with open(fName, "r") as f:
        for line in f:
            info = line.split(' ')
            dataOpen[datetime.strptime(info[0], "%d.%m.%Y-%H:%M")] = float(info[1].replace('\n', ''))
            dataClose[datetime.strptime(info[0], "%d.%m.%Y-%H:%M")] = float(info[2].replace('\n', ''))
            volume[float(info[2].replace('\n', ''))] = float(info[3].replace('\n', ''))
    return [dataOpen, dataClose, volume]

def priceAnalizer(dataOpen, dataClose):
    # –ö–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è
    priceOpen = list(dataOpen.values())[0]
    priceClose = list(dataClose.values())[-1]

    message = f"  ¬∑ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{priceOpen}</b>$\n  ¬∑ –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: <b>{priceClose}</b>$\n"

    if priceOpen > priceClose:
        message += f"  ¬∑ –ü—Ä–∏—Ä–æ—Å—Ç: üìâ<b>{round((((priceClose/priceOpen)-1)*100),3)}</b>%"
    elif priceOpen < priceClose:
        message += f"  ¬∑ –ü—Ä–∏—Ä–æ—Å—Ç: üìà<b>{round((((priceClose/priceOpen)-1)*100),3)}</b>%"
    else:
        message += f"  ¬∑ –ü—Ä–∏—Ä–æ—Å—Ç: <b>{((priceOpen/priceClose)-1)*100}</b>%"

    return message

def distributionDensity(d):
    # –º–∞—Å—Å–∏–≤ —Ü–µ–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    prices = list(d.values())
    prices.sort()

    retD = {}

    startVal = prices[0]
    counter = 0
    for i in range(len(prices)):
        if startVal == prices[i]:
            counter += 1
        else:
            retD[startVal] = counter

            startVal = prices[i]
            counter = 1

        retD[startVal] = counter


    return retD
